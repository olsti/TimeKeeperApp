@page "/records"
@using System.Globalization
@using TimeKeeperApp.Models
@inject Services.TimeKeeperService TimeKeeperService
@inject ISnackbar Snackbar

<MudTable Items="@_timeRecords" Dense="true" Hover="true" ReadOnly="false" CanCancelEdit="true"
    Filter="new Func<TimeRecord,bool>(FilterFunc)" @bind-SelectedItem="_selectedRecord1" SortLabel="Sort By"
    CommitEditTooltip="Commit Edit" OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))"
    RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
    IsEditRowSwitchingBlocked="true" ApplyButtonPosition="TableApplyButtonPosition.End"
    EditTrigger="TableEditTrigger.RowClick">
    <ToolBarContent>
        <MudText Typo="Typo.h6">TimeRecords</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mr-2">
        </MudTextField>
        <MudSpacer />
        <MudSwitch class="mx-2" T="bool" @bind-Value="_showInvalidated" LabelPosition="LabelPosition.Start">Show All
        </MudSwitch>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Descending"
                SortBy="new Func<TimeRecord, object>(x=>x.RecordDate)">
                RecordDate</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<TimeRecord, object>(x=>x.StartTime)">StartTime</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<TimeRecord, object>(x=>x.EndTime)">EndTime</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<TimeRecord, object>(x=>x.BreakTime)">BreakTime</MudTableSortLabel>
        </MudTh>
        <MudTh> Note
        </MudTh>
        <MudTh> WorkTime
        </MudTh>
        <MudTh> Actions
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="RecordDate">@Convert.ToDateTime(@context.RecordDate).ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="StartTime">@context.StartTime.ToString("HH:mm",
            CultureInfo.InvariantCulture)</MudTd>
        <MudTd DataLabel="EndTime">@context.EndTime.ToString("HH:mm",
            CultureInfo.InvariantCulture)</MudTd>
        <MudTd DataLabel="BreakTime">@Convert.ToDateTime(DateTime.Today+TimeSpan.FromHours(@context.BreakTime)).ToString("HH:mm", CultureInfo.InvariantCulture)</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
        <MudTd DataLabel="WorkTime">@Convert.ToDateTime(DateTime.Today+TimeSpan.FromHours(@context.WorkTime)).ToString("HH:mm", CultureInfo.InvariantCulture)</MudTd>
        <MudTd DataLabel="Invalidate">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete"
                OnClick="@((e)=> InvalidateRecord(@context.Id))">
            </MudIconButton>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="RecordDate">
            <MudTextField @bind-Value="context.RecordDate" Required />
        </MudTd>
        <MudTd DataLabel="StartTime">
            <MudTextField @bind-Value="context.StartTime" Required />
        </MudTd>
        <MudTd DataLabel="EndTime">
            <MudTextField @bind-Value="context.EndTime" Required />
        </MudTd>
        <MudTd DataLabel="BreakTime">
            <MudTextField @bind-Value="context.BreakTime" Required />
        </MudTd>
        <MudTd DataLabel="Note">
            <MudTextField @bind-Value="context.Note" Required />
        </MudTd>
        <MudTd DataLabel="WorkTime">
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0"
            OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

<MudText HtmlTag="span">Selected1: @_selectedRecord1?.CreatedAt</MudText>

@code {

    private List<string> _editEvents = new();
    private string _searchString = "";
    private bool _showInvalidated = false;
    private TimeRecord _selectedRecord1;
    private TimeRecord _recordBeforeEdit;
    private HashSet<TimeRecord> selectedItems1 = new HashSet<TimeRecord>();
    private IEnumerable<TimeRecord> _timeRecords = new List<TimeRecord>();

    protected override async Task OnInitializedAsync()
    {
        _timeRecords = await TimeKeeperService.GetTimeRecordsAsync();
    }

    private void ClearEventLog()
    {
        _editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        _editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object record)
    {
        _recordBeforeEdit = new()
            {
                StartTime = ((TimeRecord)record).StartTime,
                EndTime = ((TimeRecord)record).EndTime,
                BreakTime = ((TimeRecord)record).BreakTime,
                Note = ((TimeRecord)record).Note
            };
        AddEditionEvent($"RowEditPreview event: made a backup of TimeRecord {((TimeRecord)record).CreatedAt}");
    }

    private void ItemHasBeenCommitted(object record)
    {
        AddEditionEvent($"RowEditCommit event: Changes to TimeRecord {((TimeRecord)record).CreatedAt} committed");
    }

    private void ResetItemToOriginalValues(object record)
    {
        ((TimeRecord)record).StartTime = _recordBeforeEdit.StartTime;
        ((TimeRecord)record).EndTime = _recordBeforeEdit.EndTime;
        ((TimeRecord)record).BreakTime = _recordBeforeEdit.BreakTime;
        ((TimeRecord)record).Note = _recordBeforeEdit.Note;
        AddEditionEvent($"RowEditCancel event: Editing of TimeRecord {((TimeRecord)record).CreatedAt} canceled");
    }

    private bool FilterFunc(TimeRecord record)
    {
        if (!_showInvalidated && !record.IsValid)
            return false;
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return record.Note.Contains(_searchString, StringComparison.OrdinalIgnoreCase) || $"{record.StartTime} {record.BreakTime} {record.EndTime} {record.Note}".Contains(_searchString);
    }

    private async void InvalidateRecord(Guid recordId)
    {
        await TimeKeeperService.InvalidateRecordAsync(recordId);
    }
}